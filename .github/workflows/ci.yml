name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: macos-latest
    strategy:
      matrix:
        compiler: [ clang ]
        build_type: [ Debug, Release ]

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (macOS)
        run: |
          brew install cmake ninja xtensor googletest
          git clone https://github.com/xtensor-stack/xtensor-blas.git
          mkdir -p xtensor-blas/build
          cd xtensor-blas/build
          cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local
          sudo cmake --install .
          cd ../..
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$(brew --prefix)" >> $GITHUB_ENV

      - name: Configure CMake
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_C_COMPILER=${{ env.CC }} \
            -DCMAKE_CXX_COMPILER=${{ env.CXX }} \
            -DCMAKE_PREFIX_PATH="${{ env.CMAKE_PREFIX_PATH }}" \
            -G Ninja

      - name: Build
        run: cmake --build build --config ${{ matrix.build_type }}

      - name: Run tests
        working-directory: build
        run: |
          ctest --output-on-failure --verbose

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-results-macos-clang-${{ matrix.build_type }}
          path: build/Testing/

  code-quality:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          # Update brew and install dependencies
          brew update
          brew install cmake ninja clang-format llvm cppcheck googletest xtensor

      - name: Setup LLVM tools path
        run: echo "$(brew --prefix llvm)/bin" >> $GITHUB_PATH

      - name: Check code formatting
        run: |
          find . -name '*.cpp' -o -name '*.hpp' | xargs clang-format --dry-run --Werror

      - name: Run static analysis (cppcheck)
        run: |
          cppcheck --enable=all --suppress=missingIncludeSystem --suppress=unusedFunction --suppress=noExplicitConstructor -I include/ src/
  

  documentation:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Doxygen
        run: sudo apt-get install -y doxygen graphviz

      - name: Generate documentation
        run: |
          doxygen Doxyfile

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs/html

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  performance:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build libgtest-dev valgrind

      - name: Build with profiling
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=RelWithDebInfo -G Ninja
          cmake --build build

      - name: Run performance tests
        run: |
          echo "Performance testing placeholder"

      - name: Memory leak check
        run: |
          echo "Memory leak check placeholder"